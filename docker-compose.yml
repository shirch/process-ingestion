version: '3.8'

services:
  process-ingestion:
    container_name: process-ingestion
    build:
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=process_user
      - DB_PASSWORD=process_password
      - DB_DATABASE=process_analytics
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=process-commands
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=process_user
      - POSTGRES_PASSWORD=process_password
      - POSTGRES_DB=process_analytics
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U process_user -d process_analytics']
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '2181:2181'

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'TestTopic:1:1'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '/opt/kafka_2.13-2.8.1/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list',
        ]
      interval: 10s
      timeout: 15s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - '9000:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  adminer:
    container_name: adminer
    image: adminer:latest
    ports:
      - '8080:8080'
    depends_on:
      - postgres

volumes:
  postgres_data:
  kafka_data_vol:
  zookeeper_data:
  zookeeper_logs:
